
use strict;
use warnings;
use utf8;

BEGIN {
    if(defined($ENV{'SPSID_CONFIG'})) {
        do $ENV{'SPSID_CONFIG'};
    } else { do '@spsid_config_pl@'; }
    die($@) if $@;
}


use JSON::RPC::Dispatcher;
use Try::Tiny;
use SPSID::Server;
use Log::Any::Adapter;

if( defined($SPSID::log4perlconf) )
{
    require Log::Log4perl;
    Log::Log4perl::init($SPSID::log4perlconf);
    Log::Any::Adapter->set('Log4perl');
}
else
{
    Log::Any::Adapter->set('Stderr');
}



my $server = SPSID::Server->new();
$server->connect();


sub extract_userid
{
    my $plack_request = shift;
    
    my $userid = $plack_request->user();
    if( not defined($userid) ) {
        $userid = $plack_request->headers->header('X-Remote-User');
    }
    
    if( defined($userid) ) {
        $server->user_id($userid);
    }
}


sub create_object
{
    my $plack_request = shift;
    my %arg = @_;

    die('objclass required') unless defined $arg{'objclass'};
    die('attr required') unless defined $arg{'attr'};

    extract_userid($plack_request);
    my $id = $server->create_object($arg{'objclass'}, $arg{'attr'});
    $server->clear_user_id;
    return $id;
}



sub modify_object
{
    my $plack_request = shift;
    my %arg = @_;

    die('id required') unless defined $arg{'id'};
    die('mod_attr required') unless defined $arg{'mod_attr'};

    extract_userid($plack_request);
    $server->modify_object($arg{'id'}, $arg{'mod_attr'});
    $server->clear_user_id;
    return;
}


sub validate_object
{
    my %arg = @_;

    die('attr required') unless defined $arg{'attr'};

    my $result = {'status' => 1};
    try {
        $server->validate_object($arg{'attr'});
    } catch {
        $result->{'status'} = 0;
        $result->{'error'} = $_;
    };
    return $result;
}


sub delete_object
{
    my $plack_request = shift;
    my %arg = @_;

    die('id required') unless defined $arg{'id'};

    extract_userid($plack_request);
    $server->delete_object($arg{'id'});
    $server->clear_user_id;
    return;
}


sub get_object
{
    my %arg = @_;
    die('id required') unless defined $arg{'id'};
    return $server->get_object($arg{'id'});
}


sub add_application_log
{
    my %arg = @_;
    die('id required') unless defined $arg{'id'};
    die('application required') unless defined $arg{'application'};
    die('userid required') unless defined $arg{'userid'};
    die('message required') unless defined $arg{'message'};
    $server->add_application_log
        ($arg{'id'}, $arg{'application'}, $arg{'userid'}, $arg{'message'});
    return;
}


sub get_object_log
{
    my %arg = @_;
    die('id required') unless defined $arg{'id'};
    return $server->get_object_log($arg{'id'});
}


sub get_last_change_id
{
    return $server->get_last_change_id();
}


sub get_last_changes
{
    my %arg = @_;
    die('start_id required') unless defined $arg{'start_id'};
    die('max_rows required') unless defined $arg{'max_rows'};
    return $server->get_last_changes($arg{'start_id'}, $arg{'max_rows'});
}


sub search_objects
{
    my %arg = @_;

    die('container required') unless exists $arg{'container'};
    die('objclass required') unless defined $arg{'objclass'};

    my @search_attrs = ();
    if( defined($arg{'search_attrs'}) ) {
        die('search_attrs must be ARRAY') unless
            ref($arg{'search_attrs'}) eq 'ARRAY';

        @search_attrs = @{$arg{'search_attrs'}};
    }

    return $server->search_objects($arg{'container'},
                                  $arg{'objclass'},
                                  @search_attrs);
}


sub search_prefix
{
    my %arg = @_;

    die('objclass required') unless defined $arg{'objclass'};
    die('attr_name required') unless exists $arg{'attr_name'};
    die('attr_prefix required') unless defined $arg{'attr_prefix'};

    return $server->search_prefix($arg{'objclass'},
                                 $arg{'attr_name'},
                                 $arg{'attr_prefix'});
}


sub search_fulltext
{
    my %arg = @_;

    die('objclass required') unless defined $arg{'objclass'};
    die('search_string required') unless exists $arg{'search_string'};

    return $server->search_fulltext($arg{'objclass'},
                                    $arg{'search_string'});
}


sub get_attr_values
{
    my %arg = @_;

    die('objclass required') unless defined $arg{'objclass'};
    die('attr_name required') unless exists $arg{'attr_name'};

    return $server->get_attr_values($arg{'objclass'},
                                    $arg{'attr_name'});
}


sub contained_classes
{
    my %arg = @_;
    die('container required') unless defined $arg{'container'};
    return $server->contained_classes($arg{'container'});
}


sub get_schema
{
    return $server->get_schema();
}


sub new_object_default_attrs
{
    my %arg = @_;

    die('container required') unless defined $arg{'container'};
    die('objclass required') unless defined $arg{'objclass'};
    die('templatekeys required') unless defined $arg{'templatekeys'};

    return $server->new_object_default_attrs($arg{'container'},
                                             $arg{'objclass'},
                                             $arg{'templatekeys'});
}

sub recursive_md5
{
    my %arg = @_;
    die('id required') unless defined $arg{'id'};
    return $server->recursive_md5($arg{'id'});
}


my $rpc = JSON::RPC::Dispatcher->new;

$rpc->register('create_object', \&create_object, { with_plack_request => 1 });
$rpc->register('modify_object', \&modify_object, { with_plack_request => 1 });
$rpc->register('validate_object', \&validate_object);
$rpc->register('delete_object', \&delete_object, { with_plack_request => 1 });
$rpc->register('get_object', \&get_object);
$rpc->register('add_application_log', \&add_application_log);
$rpc->register('get_object_log', \&get_object_log);
$rpc->register('get_last_change_id', \&get_last_change_id);
$rpc->register('get_last_changes', \&get_last_changes);
$rpc->register('search_objects', \&search_objects);
$rpc->register('search_prefix', \&search_prefix);
$rpc->register('search_fulltext', \&search_fulltext);
$rpc->register('get_attr_values', \&get_attr_values);
$rpc->register('contained_classes', \&contained_classes);
$rpc->register('get_schema', \&get_schema);
$rpc->register('new_object_default_attrs', \&new_object_default_attrs);
$rpc->register('recursive_md5', \&recursive_md5);

$rpc->register('ping', sub{my %arg = @_; $server->ping(); return \%arg});

$rpc->register('server_version', sub{return "1.0"});

foreach my $reg (values %{$SPSID::Plugin::rpc})
{
    &{$reg}($rpc, $server);
}

$rpc->to_app;


# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 4
# cperl-continued-statement-offset: 4
# cperl-continued-brace-offset: -4
# cperl-brace-offset: 0
# cperl-label-offset: -2
# End:
